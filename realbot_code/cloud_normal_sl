using System;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;

namespace cAlgo
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class IchimokuCloudStrategy : Robot
    {
        [Parameter("Trading Volume (Lots)", DefaultValue = 0.1)]
        public double TradingVolume { get; set; }

        [Parameter("EMA Period", DefaultValue = 50)]
        public int EmaPeriod { get; set; }

        [Parameter("Conversion Period", DefaultValue = 9)]
        public int ConversionPeriod { get; set; }

        [Parameter("Base Period", DefaultValue = 26)]
        public int BasePeriod { get; set; }

        [Parameter("Stop Loss %", DefaultValue = 0.05)]
        public double StopLossPercent { get; set; }

        [Parameter("Take Profit %", DefaultValue = 0.10)]
        public double TakeProfitPercent { get; set; }

        private ExponentialMovingAverage _ema;

        protected override void OnStart()
        {
            // Initialize the Exponential Moving Average indicator
            _ema = Indicators.ExponentialMovingAverage(Bars.ClosePrices, EmaPeriod);
        }

        protected override void OnBar()
        {
            // Ensure there is enough data to calculate the indicators
            if (Bars.Count < Math.Max(ConversionPeriod, BasePeriod) + 1)
                return;

            // Check if there's already an open position
            if (HasOpenPosition())
                return;

            // Calculate Ichimoku Cloud lines
            var conversionLine = CalculateConversionLine();
            var baseLine = CalculateBaseLine();

            // Determine trading signal
            var signal = GetSignal(conversionLine, baseLine);

            // Execute trades based on the signal
            if (signal == 1)
                OpenLongPosition();
            else if (signal == -1)
                OpenShortPosition();
        }

        private bool HasOpenPosition()
        {
            return Positions.Find("IchimokuCloudStrategy", SymbolName) != null;
        }

        private double CalculateConversionLine()
        {
            var high = Bars.HighPrices.Maximum(ConversionPeriod);
            var low = Bars.LowPrices.Minimum(ConversionPeriod);
            return (high + low) / 2;
        }

        private double CalculateBaseLine()
        {
            var high = Bars.HighPrices.Maximum(BasePeriod);
            var low = Bars.LowPrices.Minimum(BasePeriod);
            return (high + low) / 2;
        }

        private int GetSignal(double conversionLine, double baseLine)
        {
            var close = Bars.ClosePrices.LastValue;
            var ema = _ema.Result.LastValue;

            if (conversionLine > baseLine && close > ema)
                return 1;
            else if (conversionLine < baseLine && close < ema)
                return -1;
            else
                return 0;
        }

        private void OpenLongPosition()
        {
            // Calculate stop loss and take profit prices
            var stopLossPrice = Symbol.Bid * (1 - StopLossPercent);
            var takeProfitPrice = Symbol.Bid * (1 + TakeProfitPercent);

            // Open a new long position
            ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.NormalizeVolumeInUnits(TradingVolume, RoundingMode.ToNearest), "IchimokuCloudStrategy", stopLossPrice, takeProfitPrice);
        }

        private void OpenShortPosition()
        {
            // Calculate stop loss and take profit prices
            var stopLossPrice = Symbol.Ask * (1 + StopLossPercent);
            var takeProfitPrice = Symbol.Ask * (1 - TakeProfitPercent);

            // Open a new short position
            ExecuteMarketOrder(TradeType.Sell, SymbolName, Symbol.NormalizeVolumeInUnits(TradingVolume, RoundingMode.ToNearest), "IchimokuCloudStrategy", stopLossPrice, takeProfitPrice);
        }
    }
}
